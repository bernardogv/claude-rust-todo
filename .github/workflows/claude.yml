name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write      # ← Changed from 'read' to 'write'
      pull-requests: write # ← Changed from 'read' to 'write'
      issues: write        # ← Changed from 'read' to 'write'
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Add allowed tools for Rust project
          allowed_tools: "Bash,View,Edit,GlobTool,GrepTool,BatchTool,CreateTool"
          # OR for Rust-specific commands only:
          # allowed_tools: "Bash(git:*,cargo:*,rustc:*,rustfmt:*),View,Edit,GlobTool,GrepTool,BatchTool,CreateTool"

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          custom_instructions: |
            This is a Rust project. Always run cargo fmt after making changes.
            Run cargo test to verify changes work correctly.
            Follow Rust naming conventions and idioms.